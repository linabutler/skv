# Rough notes

## API

* [CRUD interface](https://searchfox.org/mozilla-central/rev/dfc3050503739883ce6d17e8365bc35410106aba/toolkit/components/kvstore/nsIKeyValue.idl#228-234,270-273,278-280,290-292,311): `put(key, vÐ°lue)`, `get(key, defaultValue)`, `has(key)`, `delete(key)`, `clear()`
* [Range reads and deletions](https://searchfox.org/mozilla-central/rev/dfc3050503739883ce6d17e8365bc35410106aba/toolkit/components/kvstore/nsIKeyValue.idl#303-306,322-325): `enumerate(fromKey, toKey)`, `deleteRange(fromKey, toKey)`
* Support for explicit [transactions](https://bugzilla.mozilla.org/show_bug.cgi?id=1499238).
  - Read-write transactions can use the main connection to the SQLite database.
  - Read-only transactions can use a second read-only connection to the same database, where read performance is important.

## SQLite Options

* Default `PRAGMA`s.
  - `WAL` vs. `TRUNCATE` journal mode...is WAL mode always the best choice?
  * Reasonable `PRAGMA page_size`: larger page sizes are better for large rows and read-heavy workloads; trade-off faster reads for slower writes.
  - `PRAGMA foreign_keys`: small performance cost to using them, and corrupt databases can violate constraints.
* Checked memory-mapping: [Chrome does this in a very clever way!](https://bugzilla.mozilla.org/show_bug.cgi?id=1926195)

## Handling corruption

* Run `PRAGMA quick_check` or `PRAGMA integrity_check` after noticing ["too many"](https://searchfox.org/mozilla-central/rev/dfc3050503739883ce6d17e8365bc35410106aba/toolkit/components/kvstore/src/skv/checker.rs#49-62) (tunable thresholds) corruption errors.
* [Move corrupt databases aside](https://searchfox.org/mozilla-central/rev/dfc3050503739883ce6d17e8365bc35410106aba/toolkit/components/kvstore/src/skv/store.rs#173-177).
  - Doing this when the Firefox main and content processes are sharing the same database could be tricky.
* Salvage data from corrupt databases.
  - Try to [read and reinsert database rows](https://searchfox.org/mozilla-central/rev/6ec81d7b1d2f60c18f1de400ac9e8ada1f905352/toolkit/components/places/Database.cpp#985-1010) with `PRAGMA writable_schema = ON`.
  - Periodically back up critical data to `.jsonlz4` archives in the profile directory, and restore from those.
  - Use the [SQLite Recovery API](https://www.sqlite.org/recovery.html): some data might be missing or invalid; might violate consumers' expectations.

## Sync

* Three-table system: mirror, incoming staging area, outgoing staging area.
* Ideas for conflict resolution.
  - Let the caller specify its own merge function? `merge(ancestor, local, remote) -> newValue`
  - Default to comparing the relative ages of the incoming and outgoing changes (clock skew is an issue), and picking the newest.
    * iCloud Keychain and `NSUbiquitousKeyValueStore` don't try to compare clocks, and default to "remote always wins".
  - Prior art: [schema-driven conflict resolution](https://github.com/mozilla/application-services/blob/92f07367975ad5921315870504b68ea082890d30/docs/design/remerge/rfc.md), using [explicitly-declared relationships](https://developer.apple.com/documentation/coredata/modeling_data/configuring_relationships) to resolve conflicts, automatic three-way merging for each field.
    * Valid merges can produce semantically weird results (the "first name, last name, full name" problem from Firefox address autofill).
